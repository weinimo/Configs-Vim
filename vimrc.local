scriptencoding utf-8
" ^^ Please leave the above line at the start of the file.

" Vimrc file created by Thomas Weininger.

" ==========================================================
" Plugins included
" ==========================================================
" Pathogen
"     Better Management of VIM plugins
"
" OmniCppComplete
"     C/C++ omni-completion with ctags database
"
" GunDo
"     Visual Undo in vim with diff's to check the differences
"
" Pytest
"     Runs your Python tests in Vim.
"
" Command-T (needs ruby - does not work with GVim)
"     Allows easy search and opening of files within a given path
"
" Snipmate
"     Configurable snippets to avoid re-typing common comands
"
" PyFlakes
"     Underlines and displays errors with Python on-the-fly
"
" Fugitive
"    Interface with git from vim
"
" Git
"    Syntax highlighting for git config files
"
" Pydoc
"    Opens up pydoc within vim
"
" Surround
"    Allows you to surround text with open/close tags
"
" Py.test
"    Run py.test test's from within vim
"
" MakeGreen
"    Generic test runner that works with nose


" ==========================================================
" Pre-Settings
" ==========================================================
execute pathogen#infect()
filetype off
call pathogen#incubate()
call pathogen#helptags()


" ==========================================================
" Basic Settings
" ==========================================================
" Recommendations from
" http://sontek.net/blog/detail/turning-vim-into-a-modern-python-ide
set nocompatible            " Don't be compatible with vi
filetype on                 " Try to detect file type
filetype plugin indent on   " Enable loading indent file for filetype
let mapleader=","           " Change the leader to be a comma vs slash
set nomodeline              " We don't allow modelines by default. See Gentoo bug #14088 and bug #73715.
set background=dark         " Increases readability
set viminfo='20,\"500       " Keep a .viminfo file.
set history=50              " Keep 50 lines of command history
set spelllang=en,de         " Spell settings. Activate spell checking using the 'spell' option.
set spell

" If terminal has colors, turn on syntax und search pattern highlighting
if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
endif


""" Messages, Info, Status
set ruler                   " Show some info, even without statuslines.
set laststatus=2            " Always show statusline, even if only 1 window.
" set statusline=[%l,%v\ %P%M]\ %f\ %r%h%w\ (%{&ff})\ %{fugitive#statusline()}
set vb t_vb=                " Disable visual bell (blink)
set noerrorbells            " Disable error bell
set title                   " Show title in console title bar


""" Moving around/Editing
set scrolloff=3             " Keep 3 context lines above and below the cursor
set backspace=indent,eol,start " Allow backspacing over everything in insert mode
set virtualedit=block       " Let cursor move past the last char in <C-v> mode

" Ack as a grep alternative
nmap <leader>a <Esc>:Ack!

" replace: %s/old/new/g (without g: replace only first occurance in lines)
map <C-h> :%s/


""" Copy/Cut/Paste with/without Registers
" Paste from clipboard
map <leader>p "+p

" Select everything
map <C-a> GVgg

" Hide matches on <leader>space
nnoremap <leader><space> :nohlsearch<cr>


""" Searching and Patterns
set ignorecase              " Default to using case insensitive searches,
set smartcase               " unless uppercase letters are used in the regex.


""" File Reading/Writing
" Show diffs between saves so they can be reverted
map <leader>g :GundoToggle<CR>


""" Buffers / Windows / Tabs
map <Leader>b :MiniBufExplorer<cr>
let g:miniBufExplMapWindowNavVim = 1
let g:miniBufExplMapWindowNavArrows = 1
let g:miniBufExplMapCTabSwitchBufs = 1
let g:miniBufExplModSelTarget = 1
" Edit new buffer (new file)
map <C-n> :enew
" Wildmenu remapping
"set wildchar=<F12> wildmenu wildmode=full
"set wildcharm=<C-Z>
"nnoremap <F10> :b <C-Z>
nnoremap <Leader>1 :1b<CR>
nnoremap <Leader>2 :2b<CR>
nnoremap <Leader>3 :3b<CR>
nnoremap <Leader>4 :4b<CR>
nnoremap <Leader>5 :5b<CR>
nnoremap <Leader>6 :6b<CR>
nnoremap <Leader>7 :7b<CR>
nnoremap <Leader>8 :8b<CR>
nnoremap <Leader>9 :9b<CR>
nnoremap <Leader>0 :10b<CR>

" Quit window on <leader>q
nnoremap <leader>q :q<CR>

" open new tab
map <C-t> :tabnew <Enter>


""" File System
" Set working directory
nnoremap <leader>. :lcd %:p:h<CR>

" NERDTree file browser
map <leader>n :NERDTreeToggle<CR>

" When doing tab completion, give the following files lower priority.
set suffixes+=.info,.aux,.log,.dvi,.bbl,.out,.o,.lo
" When doing tab completion, completely ignore following files
set wildignore+=*.o,*.obj,.git,*.pyc
set wildignore+=eggs/**
set wildignore+=*.egg-info/**


""" Software Development
" Show TODO and FIXME list
map <leader>td <Plug>TaskList

" goto definition with F2
map <F2> <C-]>

" switch between header/source with F4
map <F4> :e %:p:s,.h$,.X123X,:s,.cpp$,.h,:s,.X123X$,.cpp,<Enter>

" Build
map <F6> :make<Enter>

" Rebuild (Shift-F6)
map <S-F6> :make clean all<Enter>

" recreate tags file with F8
map <F8> :!ctags -R --c++-kinds=+pl --fields=+iaS --extra=+q .<Enter>

" RopeVim refactoring tools (also renames all references)
map <leader>j :RopeGotoDefinition<CR>
map <leader>r :RopeRename<CR>


""" Indentation/Formatting
"set autoindent              " Always set auto-indenting on
"set smartindent             " Use smart indent if there is no indent file
"set smarttab                " Handle tabs more intelligently
set expandtab               " Do not use tabs for indentation in insert mode
set shiftwidth=4            " 4 spaces for indenting
set shiftround              " Rounds indent to a multiple of shiftwidth
set softtabstop=4           " Let tabstops be 4 characters long while editing (inserts spaces instead of tabs)
set textwidth=0             " Disable line break of long lines
set nowrap                  " Don't wrap lines

" Increase/Decrease indent
map <C-i> >>
map <C-u> <<

" Make tabs and trailing characters visible
set listchars=tab:»·,trail:·,precedes:<,extends:>
set list

" Remove trailing whitespace on <leader>S
nnoremap <leader>S :%s/\s\+$//<cr>:let @/=''<CR>


""" Folding
set foldmethod=indent       " More indent means a higher fold level
set foldlevel=99            " Folds with a higher level will be closed

" <Space> toggles folding if possible
nnoremap <silent> <Space> @=(foldlevel('.')?'za':"\<Space>")<CR>
vnoremap <Space> zf
" Close all folds
nnoremap <leader>f zM
" Open all folds
nnoremap <leader>o zR

" Save and restore folds on file open/close
autocmd BufWinLeave *.* mkview
autocmd BufWinEnter *.* silent loadview

""" C/C++ Language
let OmniCpp_NamespaceSearch = 1
let OmniCpp_GlobalScopeSearch = 1
let OmniCpp_ShowAccess = 1
let OmniCpp_ShowPrototypeInAbbr = 1 " show function parameters
let OmniCpp_MayCompleteDot = 1 " autocomplete after .
let OmniCpp_MayCompleteArrow = 1 " autocomplete after ->
let OmniCpp_MayCompleteScope = 1 " autocomplete after ::
let OmniCpp_DefaultNamespaces = ["std", "_GLIBCXX_STD"]

" automatically open and close the popup menu / preview window
au CursorMovedI,InsertLeave * if pumvisible() == 0|silent! pclose|endif
set completeopt=menuone,menu,longest,preview

" OmniCppComplete like described on http://vim.wikia.com/wiki/C++_code_completion
" This offers intelligent C++ completion when typing ‘.’ ‘->’ or <C-o>
" Load standard tag files
set tags+=~/vimfiles/tags/cpp
set tags+=~/vimfiles/tags/qt


""" Python Language

" Add the virtualenv's site-packages to vim path
"py << EOF
"import os.path
"import sys
"import vim
"if 'VIRTUAL_ENV' in os.environ:
"    project_base_dir = os.environ['VIRTUAL_ENV']
"    sys.path.insert(0, project_base_dir)
"    activate_this = os.path.join(project_base_dir, 'bin/activate_this.py')
"    execfile(activate_this, dict(__file__=activate_this))
"EOF

" No quickfix window for pyflakes
let g:pyflakes_use_quickfix = 0

" PEP8 check shortcut
let g:pep8_map='<leader>8'


" ==========================================================
" Settings that are invisible to the user
" ==========================================================

" If we have a BOM, always honour that rather than trying to guess.
if &fileencodings !~? "ucs-bom"
  set fileencodings^=ucs-bom
endif

" Always check for UTF-8 when trying to determine encodings.
if &fileencodings !~? "utf-8"
  " If we have to add this, the default encoding is not Unicode.
  " We use this fact later to revert to the default encoding in plaintext/empty
  " files.
  let g:added_fenc_utf8 = 1
  set fileencodings+=utf-8
endif

" Make sure we have a sane fallback for encoding detection
if &fileencodings !~? "default"
  set fileencodings+=default
endif


if has("gui_running")
  " GUI is running or is about to start.
  " Maximize gvim window.
  set lines=999 columns=999
  colorscheme koehler
else
  " This is console Vim.
  if exists("+lines")
    set lines=50
  endif
  if exists("+columns")
    set columns=100
  endif
endif

" vim: set fenc=utf-8 tw=80 sw=2 sts=2 et foldmethod=marker :

