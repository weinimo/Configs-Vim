scriptencoding utf-8
" ^^ Please leave the above line at the start of the file.

" Vimrc file created by Thomas Weininger.

" ==========================================================
" Plugins included {{{
" ==========================================================
" Ack
"     Uses Ack as an alternative for grep
" Airline
"     Advanced status line
" CtrlP
"     Full path fuzzy ... finder for Vim
" Fugitive
"    Interface with git from vim
" Git
"    Syntax highlighting for git config files
" GunDo
"     Visual Undo in vim with diff's to check the differences
" NERD tree
"    File system explorer
" OmniCppComplete
"     C/C++ omni-completion with ctags database
" Pathogen
"     Better Management of VIM plugins
" Py.test
"     Runs your Python tests in Vim.
" Surround
"    Allows you to surround text with open/close tags
" Syntastic
"    A syntax check plugin for different languages
" Tasklist
"    Show task lists (TODO, FIXME, ...)
" Ultisnips
"    Snippets plugin for Vim
" vim-snippets
"    Snippets for snipMate and Ultisnips
" }}}
" ==========================================================
" How to add/remove new plugins {{{
" ==========================================================
" Add:
" cd ~/.vim
" git submodule add <git-repo> bundle/<scriptname>
" git submodule init && git submodule update
" git submodule foreach git submodule init
" git submodule foreach git submodule update
" git commit
"
" Remove:
" cd ~/.vim
" git submodule deinit bundle/<scriptname>
" git rm bundle/<scriptname>
" git commit
" }}}

" ==========================================================
" Pre-Settings {{{
" ==========================================================
filetype off
call pathogen#infect()
call pathogen#helptags()    " generate helptags for everything
" }}}

""" Experimental things {{{
" Enable the menu and pydoc preview
set completeopt=menuone,longest,preview
" Neocomplete
let g:neocomplete#enable_at_startup = 1
" Enable heavy omni completion.
if !exists('g:neocomplete#sources#omni#input_patterns')
  let g:neocomplete#sources#omni#input_patterns = {}
endif
" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return neocomplete#close_popup() . "\<CR>"
  " For no inserting <CR> key.
  "return pumvisible() ? neocomplete#close_popup() : "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><C-y>  neocomplete#close_popup()
inoremap <expr><C-e>  neocomplete#cancel_popup()
" }}}

" ==========================================================
" Basic Settings {{{
" ==========================================================
" Recommendations from
" http://sontek.net/blog/detail/turning-vim-into-a-modern-python-ide
set nocompatible            " Don't be compatible with vi
syntax on
filetype plugin indent on   " Enable filetype detection. Also important for many plugins
let mapleader=","           " Change the leader to be a comma vs slash
set nomodeline              " We don't allow modelines by default. See Gentoo bug #14088 and bug #73715.
set background=dark         " Increases readability
set wildmenu                " Menu completion in command mode on <Tab>
set wildmode=full           " <Tab> cycles between all matching choices.
set viminfo='20,\"500       " Keep a .viminfo file.
set history=50              " Keep 50 lines of command history
set spelllang=en,de         " Spell settings. Activate spell checking using the 'spell' option.
set spell
if exists("+autochdir")
  " automatically change window's cwd to file's dir
  set autochdir
endif
if has("unix")
  set browsedir=Buffer      " Open dialog defaults to current file's directory
endif

" If terminal has colors, turn on syntax und search pattern highlighting
if &t_Co > 2 || has("gui_running")
  set hlsearch
endif

inoremap jk <esc>                           " jk is escape
nnoremap <leader>sv :source $MYVIMRC<CR>    " re-source vimrc
nnoremap <leader>s :mksession<CR>           " save session, can be reopened using "vim -S"
" }}}

""" Messages, Info, Status {{{
set ruler                   " Show some info, even without statuslines.
set laststatus=2            " Always show statusline, even if only 1 window.
" set statusline=[%l,%v\ %P%M]\ %f\ %r%h%w\ (%{&ff})\ %{fugitive#statusline()}
set vb t_vb=                " Disable visual bell (blink)
set noerrorbells            " Disable error bell
set title                   " Show title in console title bar
autocmd FileChangedShell * echo "Warning: File changed on disk"
set showcmd             " show command in bottom bar

if has("unix")
  python from powerline.vim import setup as powerline_setup
  python powerline_setup()
  python del powerline_setup
endif
" }}}

""" Moving around/Editing {{{
set scrolloff=3             " Keep 3 context lines above and below the cursor
set backspace=indent,eol,start " Allow backspacing over everything in insert mode
set virtualedit=block       " Let cursor move past the last char in <C-v> mode
" move to beginning/end of line
nnoremap B ^
nnoremap E $

" Edit another file in the same directory as the current file
" uses expression to extract path from current file's path
map <Leader>e :e <C-R>=expand("%:p:h") . '/'<CR>
"map <Leader>s :split <C-R>=expand("%:p:h") . '/'<CR>

" Ack as a grep alternative
if has("unix")
  nmap <leader>a <Esc>:Ack!
endif

" replace: %s/old/new/g (without g: replace only first occurance in lines)
map <C-h> :%s/

" Disable Ex mode
map Q <Nop>
" }}}

""" Copy/Cut/Paste with/without Registers {{{
" Paste from clipboard
map <leader>p "+p

" Select everything
map <C-a> GVgg

" }}}

""" Searching and Patterns {{{
set incsearch
set ignorecase              " Default to using case insensitive searches,
set smartcase               " unless uppercase letters are used in the regex.
" Hide matches on <leader>space
nnoremap <leader><space> :nohlsearch<cr>

""" File Reading/Writing {{{
" Show diffs between saves so they can be reverted
map <leader>u :GundoToggle<CR>
map <C-s> :w<CR>
" }}}

""" Buffers / Windows / Tabs {{{
" Navigate windows with <C-j>, <C-k>, ...
map <c-j> <c-w>j
map <c-k> <c-w>k
map <c-l> <c-w>l
map <c-h> <c-w>h
" Edit new buffer
map <C-n> :e
" Jump to next buffer
map <F11> :bn<CR>
map <leader><F11> :bn!<CR>
" Jump to previous buffer
nmap <C-e> :e#<CR>
" open new tab
map <C-t> :tabnew <Enter>
" Quit window on <leader>q
map <leader>q :q<CR>
map <leader>Q :q!<CR>
" Quit window and remove buffer on <leader>w
map <leader>w :bd<CR>
map <leader>W :bd!<CR>
" CtrlP mappings
nmap ; :CtrlPBuffer<CR>
let g:ctrlp_map = '<leader>t'
"let g:ctrlp_working_path_mode = 0
let g:ctrlp_show_hidden = 0
" }}}

""" File System {{{
" Set working directory
nnoremap <leader>. :lcd %:p:h<CR>

" NERDTree file browser
map <leader>n :NERDTreeToggle<CR>

" When doing tab completion, give the following files lower priority.
set suffixes+=.info,.aux,.log,.dvi,.bbl,.out,.o,.lo
" When doing completion, completely ignore following files
set wildignore+=*.o,*.obj,*.pyc,*.swp,*.orig,*.zip,*.exe
if has("unix")
  set wildignore+=*/.git/*,*/.hg/*,*/.svn/*
  set wildignore+=*.egg-info/**
else
  set wildignore+=*\\.git\\*,*\\.hg\\*,*\\.svn\\*  " Windows ('noshellslash')
  set wildignore+=*.egg-info\\**
endif
"}}}

""" Software Development {{{
" Set pydoc part in a portable way
let g:pydoc_cmd = 'python -m pydoc'
" Show TODO and FIXME list
map <leader>td <Plug>TaskList

" Git
vmap <leader>b :<C-U>!git blame -w <C-R>=expand("%:p") <CR> \| sed -n <C-R>=line("'<") <CR>,<C-R>=line("'>") <CR>p <CR>
map <leader>gs :Gstatus<CR>
" }}}

""" Indentation/Formatting {{{
set autoindent              " Always set auto-indenting on
set shiftwidth=4            " 4 spaces for indenting
set shiftround              " Rounds indent to a multiple of shiftwidth
set tabstop=4               " Display tab width as 4 spaces
"set softtabstop=4           " Let tabstops be 4 characters long while editing (inserts spaces instead of tabs)
"set expandtab               " Do not use tabs for indentation in insert mode
set nowrap                  " Don't wrap lines

" Make tabs and trailing characters visible
set listchars=tab:»·,trail:·,precedes:<,extends:>
set list

" Remove trailing whitespace on <leader>S
nnoremap <leader>S :%s/\s\+$//<cr>:let @/=''<CR>
" ... and on save
autocmd BufWritePre *.py :%s/\s\+$//e
" }}}

""" Folding {{{
set foldmethod=marker       " More indent means a higher fold level
set foldlevel=99            " Folds with a higher level will be closed

" <Space> toggles folding if possible
nnoremap <silent> <Space> @=(foldlevel('.')?'za':"\<Space>")<CR>
vnoremap <Space> zf
" Close all folds
nnoremap <leader>f zM
" Open all folds
nnoremap <leader>o zR

" Save and restore folds on file open/close
autocmd BufWinLeave *.* mkview
autocmd BufWinEnter *.* silent loadview
" }}}

" ==========================================================
" Settings that are invisible to the user {{{
" ==========================================================

" Fix for this bug: https://github.com/scrooloose/syntastic/issues/814
if exists('+shellslash')
  set noshellslash
endif
"let g:syntastic_python_checkers = ['flake8', 'pylint']

" If we have a BOM, always honour that rather than trying to guess.
if &fileencodings !~? "ucs-bom"
  set fileencodings^=ucs-bom
endif

" Always check for UTF-8 when trying to determine encodings.
if &fileencodings !~? "utf-8"
  " If we have to add this, the default encoding is not Unicode.
  " We use this fact later to revert to the default encoding in plaintext/empty
  " files.
  let g:added_fenc_utf8 = 1
  set fileencodings+=utf-8
endif

" Make sure we have a sane fallback for encoding detection
if &fileencodings !~? "default"
  set fileencodings+=default
endif


if has("gui_running")
  " GUI is running or is about to start.
  " Maximize gvim window.
  set lines=999 columns=999
  colorscheme koehler
else
  " This is console Vim.
  if exists("+lines")
    set lines=45
  endif
  if exists("+columns")
    set columns=100
  endif
endif
" }}}

" vim: set fenc=utf-8 tw=80 sw=2 sts=2 et foldmethod=marker :

